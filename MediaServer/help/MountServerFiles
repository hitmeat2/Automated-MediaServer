#!usr/bin/perl
#MountServerFiles
use strict;
use File::Find;
use File::Basename;
no warnings 'redefine';
use File::Path qw(make_path remove_tree);

#Create a temporary file to handle requests
sub createTMP {
					my $str = "4";
					open FILE, ">/tmp/tmp_want_status.txt" or die $!;
					print FILE $str;
					close FILE;
}
createTMP();

#Create Installation Directory
sub InstallDirectory {
		make_path('/MediaServerTools');
}
InstallDirectory();

#Creates the header for my program
sub myheader {
		print "  :::::::: Mount Server Files Program :::::::::  ";
}

sub torunconfig {
		print "\n\n\n";
		print '  **		Select "Get Updates" to run the automatic update.		**';print "\n";
		print '  **			You must have an internet connection.			**';
		print "\n\n\n\n";
		sleep 6;
		system ("HandBrake");
}

#Select The Drive to Mount
#print "\n\nWhich Device are you using?\n";
#print '** If you are unsure type "sdb1" without quotations.'; print "\n";
#print '   "sda1" may also work. Try "sdb1" First! **';
#print "\n\n";
#print '-----> ';
#my $deviceDrive = <STDIN>;
#chomp $deviceDrive;

#Drive Variables including selection
#my $mountFrom = "/dev/" . $deviceDrive;
my $mountFroma = "/dev/sda1";
my $mountFromb = "/dev/sdb1";
my $mountFromc = "/dev/sdc1";
my $mountTo = "/MediaServerTools";



sub findWanted {

find( \&wanted, '/MediaServerTools/MediaServer');

}
sub wanted { 
		my $file_pattern="MediaServerConfig";
		my $specialFile = $File::Find::name;
		#$specialFile =~ s,/,\\,g;     #Reverses the backwacks
		return unless -f $specialFile;    #Only returns files, NO directories
		return unless $specialFile =~ /$file_pattern/;    #Pin Point A file pattern
		
		#print "Mounted Successfully\n";
		#return 
		#print "$specialFile\n";
		
		if($specialFile == "/MediaServerTools/MediaServer/MediaServerConfig"){
					#chomp $specialFile;
					#print "$specialFile";
		 			#print "Mounted Successfully\n";
		 			
		 			my $str = "7";
					open FILE, ">/tmp/tmp_want_status.txt" or die $!;
					print FILE $str;
					close FILE;
					return $specialFile;
		}
	
}
		
#Mounts the drive
#This is the "sda" Iteration---------------------------------------------------------
system("clear");
myheader();
print "\n\nAttempting to mount the Config Drive. ( $mountFroma ) \n";
sleep 2;
system("mount $mountFroma $mountTo");

#Subroutine That creates the temporary data file in /tmp
findWanted();

#More Variables
my $tempfiles = "/tmp/tmp_want_status.txt";

#Extracts the status from the data file in the /tmp directory
open FILE, $tempfiles or die $!;
my ($data, $n, $offset);
while (($n = read FILE, $data, 4, $offset) != 0) {
  #print "$data bytes read\n";
  $offset += $n;
}
close FILE or die $!;


if ($data == "7"){
	#This Iteration Confirms Mount "sda"-----------------------------------
	system("clear");
	myheader();
	print "\n\nThe Device \"$mountFroma\" was Mounted at \"$mountTo\" $!\n";
	system("rm -f $tempfiles");
	print "Disk Mounted Succesfully\n\n\n";
	torunconfig();
	}elsif($data == "4"){
		#This is the "sdb" Iteration---------------------------------------------------
		system("clear");
		myheader();
		print "\n\nThis is the wrong Mount, Tryin a Different Drive. ( $mountFromb ) $!\n\n";
		sleep 2;
		print "Unmounting...\n\n\n";
		system("umount $mountTo");
		sleep 1;
		print "Mounting the other drive.\n";
		system("mount $mountFromb $mountTo");
		sleep 1;
		
		#Need to check Status again
		findWanted();
		
		#Extracts the status from 2nd iteration of the data file in the /tmp directory
		open FILE, $tempfiles or die $!;
		my ($data, $n, $offset);
		while (($n = read FILE, $data, 4, $offset) != 0) {
 		 #print "$data bytes read\n";
  		$offset += $n; }
		close FILE or die $!;
		
   		
   				if ($data == "7"){
  						#This Iteration Confirms Mount "sdb"-----------------------------------
  						sleep 1;
  						system("clear");
  						myheader();
						print "\n\nThe Device \"$mountFromb\" was Mounted at \"$mountTo\" $!\n";
						system("rm -f $tempfiles");
						print "Disk Mounted Succesfully\n\n\n";
						torunconfig();
						}elsif($data == "4"){
								#This is the "sdc" Iteration---------------------------------------------------
								system("clear");
								myheader();
								print "\n\nThis is the wrong Mount, Tryin a Different Drive. ( $mountFromc ) $!\n\n";
								sleep 2;
								print "Unmounting...\n\n\n";
								system("umount $mountTo");
								sleep 1;
								print "Mounting the other drive.\n";
								system("mount $mountFromc $mountTo");
								sleep 1;
		
								#Need to check Status again
								findWanted();
		
								#Extracts the status from 2nd iteration of the data file in the /tmp directory
								open FILE, $tempfiles or die $!;
								my ($data, $n, $offset);
								while (($n = read FILE, $data, 4, $offset) != 0) {
 					 			#print "$data bytes read\n";
  								$offset += $n; }
								close FILE or die $!;
				
					
										if ($data == "7"){
												#This Iteration Confirms Mount "sdc"-----------------------------------
  												sleep 1;
  												system("clear");
  												myheader();
												print "\n\nThe Device \"$mountFromc\" was Mounted at \"$mountTo\" $!\n";
												system("rm -f $tempfiles");
												print "Disk Mounted Succesfully\n\n\n";
												torunconfig();
												}elsif($data == "4"){
														#This Iteration kills all, stops trying-----------------------------------
														system("clear");
														myheader();
														print "\n\n( $mountFromc ) Did not work either, No More Devices to Try. $!\n";
														sleep 2;
														print "Unmounting...\n\n\n";
														system("umount $mountTo");
														sleep 1;
														print "No \"MediaServerFiles\" drive is available at this time.\n\n";
														sleep 1;
														print "Exiting Server File Mount Program....\n\n\n";
														sleep 3;
														system ("HandBrake");
														}
								}
	}else{print "I dont know whats going on.";}

